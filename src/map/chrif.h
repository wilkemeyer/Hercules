/**
 * This file is part of Hercules.
 * http://herc.ws - http://github.com/HerculesWS/Hercules
 *
 * Copyright (C) 2012-2015  Hercules Dev Team
 * Copyright (C)  Athena Dev Teams
 *
 * Hercules is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef MAP_CHRIF_H
#define MAP_CHRIF_H

#include "map.h" //TBL_PC
#include "../common/hercules.h"
#include "../common/db.h"
#include "../common/mmo.h"

struct eri;
struct map_session_data;
struct status_change_entry;

/**
 * Defines
 **/
//Interval at which map server updates online listing. [Valaris]
#define CHECK_INTERVAL 3600000
//Interval at which map server sends number of connected users. [Skotlex]
#define UPDATE_INTERVAL 10000

#define CHRIF_PACKET_LEN_TABLE_SIZE 0x3d

/**
 * Enumerations
 **/
enum sd_state { ST_LOGIN, ST_LOGOUT, ST_MAPCHANGE };

/**
 * Structures
 **/
struct auth_node {
	int account_id, char_id;
	int login_id1, login_id2, sex, fd;
	time_t expiration_time;          // # of seconds 1/1/1970 (timestamp): Validity limit of the account (0 = unlimited)
	struct map_session_data *sd;     //Data from logged on char.
	int64 node_created;              //timestamp for node timeouts
	enum sd_state state;             //To track whether player was login in/out or changing maps.
};

#define chrif_char_offline(x) chrif->char_offline_nsd((x)->status.account_id,(x)->status.char_id)

/*=====================================
* Interface : chrif.h
* Generated by HerculesInterfaceMaker
* created by Susu
*-------------------------------------*/
class CChrif {
public:

	/* vars */

	static int connected;
	static int other_mapserver_count; //Holds count of how many other map servers are online (apart of this instance) [Skotlex]

	/* */
	static struct eri *auth_db_ers; //For re-utilizing player login structures.
	static DBMap* auth_db; // int id -> struct auth_node*
	/* */
	static int packet_len_table[CHRIF_PACKET_LEN_TABLE_SIZE];
	static int fd;
	static int srvinfo;
	static char ip_str[128];
	static uint32 ip;
	static uint16 port;
	static char userid[NAME_LENGTH], passwd[NAME_LENGTH];
	static int state;

	/* */
	static void init (bool minimal);
	static void final (void);
	/* funcs */
	static void setuserid (char* id);
	static void setpasswd (char* pwd);
	static void checkdefaultlogin (void);
	static bool setip (const char* ip);
	static void setport (uint16 port);

	static int isconnected (void);
	static void check_shutdown (void);

	static struct auth_node* search (int account_id);
	static struct auth_node* auth_check (int account_id, int char_id, enum sd_state state);
	static bool auth_delete (int account_id, int char_id, enum sd_state state);
	static bool auth_finished (struct map_session_data* sd);

	static void authreq (struct map_session_data* sd, bool hstandalone);
	static void authok (int fd);
	static bool scdata_request (int account_id, int char_id);
	static bool save (struct map_session_data* sd, int flag);
	static bool charselectreq (struct map_session_data* sd, uint32 s_ip);
	static bool changemapserver (struct map_session_data* sd, uint32 ip, uint16 port);

	static bool searchcharid (int char_id);
	static bool changeemail (int id, const char *actual_email, const char *new_email);
	static bool char_ask_name (int acc, const char* character_name, unsigned short operation_type, int year, int month, int day, int hour, int minute, int second);
	static int updatefamelist (struct map_session_data *sd);
	static bool buildfamelist (void);
	static bool save_scdata (struct map_session_data *sd);
	static bool ragsrvinfo (int base_rate,int job_rate, int drop_rate);
	//int (*char_offline) (struct map_session_data *sd);
	static bool char_offline_nsd (int account_id, int char_id);
	static bool char_reset_offline (void);
	static bool send_users_tochar (void);
	static bool char_online (struct map_session_data *sd);
	static bool changesex (struct map_session_data *sd, bool change_account);
	//int (*chardisconnect) (struct map_session_data *sd); // FIXME: Commented out in clif.c, function does not exist

	static bool divorce (int partner_id1, int partner_id2);

	static bool removefriend (int char_id, int friend_id);
	static void send_report (char* buf, int len);

	static bool flush (void);
	static void skillid2idx (int fd);

	static bool sd_to_auth (struct map_session_data *sd, enum sd_state state);
	static int check_connect_char_server (int tid, int64 tick, int id, intptr_t data);
	static bool auth_logout (struct map_session_data *sd, enum sd_state state);
	static void save_ack (int fd);
	static int reconnect (DBKey key, DBData *data, va_list ap);
	static int auth_db_cleanup_sub (DBKey key, DBData *data, va_list ap);
	static bool char_ask_name_answer (int acc, const char* player_name, uint16 type, uint16 answer);
	static int auth_db_final (DBKey key, DBData *data, va_list ap);
	static int send_usercount_tochar (int tid, int64 tick, int id, intptr_t data);
	static int auth_db_cleanup (int tid, int64 tick, int id, intptr_t data);

	static void connect (int fd);
	static void connectack (int fd);
	static void sendmap (int fd);
	static void sendmapack (int fd);
	static void recvmap (int fd);
	static bool changemapserverack (int account_id, int login_id1, int login_id2, int char_id, short map_index, short x, short y, uint32 ip, uint16 port);
	static void changedsex (int fd);
	static bool divorceack (int char_id, int partner_id);
	static void idbanned (int fd);
	static void recvfamelist (int fd);
	static bool load_scdata (int fd);
	static void update_ip (int fd);
	static int disconnectplayer (int fd);
	static void removemap (int fd);
	static int updatefamelist_ack (int fd);
	static void keepalive(int fd);
	static void keepalive_ack (int fd);
	static void deadopt (int father_id, int mother_id, int child_id);
	static void authfail (int fd);
	static void on_ready (void);
	static void on_disconnect (void);
	static int parse (int fd);
	static void save_scdata_single (int account_id, int char_id, short type, struct status_change_entry *sce);
	static void del_scdata_single (int account_id, int char_id, short type);

};
extern CChrif *chrif;

#ifdef HERCULES_CORE
void chrif_defaults(void);
#endif // HERCULES_CORE


#endif /* MAP_CHRIF_H */
