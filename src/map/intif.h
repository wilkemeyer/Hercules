/**
 * This file is part of Hercules.
 * http://herc.ws - http://github.com/HerculesWS/Hercules
 *
 * Copyright (C) 2012-2015  Hercules Dev Team
 * Copyright (C)  Athena Dev Teams
 *
 * Hercules is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef MAP_INTIF_H
#define MAP_INTIF_H

#include "../common/hercules.h"

/**
 * Declarations
 **/
struct auction_data;
struct guild_member;
struct guild_position;
struct guild_storage;
struct mail_message;
struct map_session_data;
struct party_member;
struct s_elemental;
struct s_homunculus;
struct s_mercenary;
struct s_pet;

/**
 * Defines
 **/
#define intif_rename_pc(sd, name)  (intif->rename((sd), 0, (name)))
#define intif_rename_pet(sd, name) (intif->rename((sd), 1, (name)))
#define intif_rename_hom(sd, name) (intif->rename((sd), 2, (name)))
#define INTIF_PACKET_LEN_TABLE_SIZE 161


/*=====================================
* Interface : intif.h
* Generated by HerculesInterfaceMaker
* created by Susu
*-------------------------------------*/
class CIntif {
public:
	/* */
	static int packet_len_table[INTIF_PACKET_LEN_TABLE_SIZE];
	/* funcs */
	static int parse (int fd);
	static int create_pet(int account_id, int char_id, short pet_type, short pet_lv, short pet_egg_id,
	                  short pet_equip, short intimate, short hungry, char rename_flag, char incubate, char *pet_name);
	static int broadcast (const char* mes, size_t len, int type);
	static int broadcast2 (const char* mes, size_t len, unsigned int fontColor, short fontType, short fontSize, short fontAlign, short fontY);
	static int main_message (struct map_session_data* sd, const char* message);
	static int wis_message (struct map_session_data *sd,char *nick,char *mes,size_t mes_len);
	static int wis_message_to_gm (char *Wisp_name, int permission, char *mes);
	static int saveregistry (struct map_session_data *sd);
	static int request_registry (struct map_session_data *sd, int flag);
	static int request_guild_storage (int account_id, int guild_id);
	static int send_guild_storage (int account_id, struct guild_storage *gstor);
	static int create_party (struct party_member *member,char *name,int item,int item2);
	static int request_partyinfo (int party_id, int char_id);
	static int party_addmember (int party_id,struct party_member *member);
	static int party_changeoption (int party_id, int account_id, int exp, int item);
	static int party_leave (int party_id,int account_id, int char_id);
	static int party_changemap (struct map_session_data *sd, int online);
	static int break_party (int party_id);
	static int party_message (int party_id, int account_id, const char *mes,int len);
	static int party_leaderchange (int party_id,int account_id,int char_id);
	static int guild_create (const char *name, const struct guild_member *master);
	static int guild_request_info (int guild_id);
	static int guild_addmember (int guild_id, struct guild_member *m);
	static int guild_leave (int guild_id, int account_id, int char_id, int flag, const char *mes);
	static int guild_memberinfoshort (int guild_id, int account_id, int char_id, int online, int lv, int class_);
	static int guild_break (int guild_id);
	static int guild_message (int guild_id, int account_id, const char *mes, int len);
	static int guild_change_gm (int guild_id, const char* name, size_t len);
	static int guild_change_basicinfo (int guild_id, int type, const void *data, int len);
	static int guild_change_memberinfo (int guild_id, int account_id, int char_id, int type, const void *data, int len);
	static int guild_position (int guild_id, int idx, struct guild_position *p);
	static int guild_skillup (int guild_id, uint16 skill_id, int account_id, int max);
	static int guild_alliance (int guild_id1, int guild_id2, int account_id1, int account_id2, int flag);
	static int guild_notice (int guild_id, const char *mes1, const char *mes2);
	static int guild_emblem (int guild_id, int len, const char *data);
	static int guild_castle_dataload (int num, int *castle_ids);
	static int guild_castle_datasave (int castle_id, int index, int value);
	static void itembound_req (int char_id, int aid, int guild_id);
	static int request_petdata (int account_id, int char_id, int pet_id);
	static int save_petdata (int account_id, struct s_pet *p);
	static int delete_petdata (int pet_id);
	static int rename (struct map_session_data *sd, int type, char *name);
	static int homunculus_create (int account_id, struct s_homunculus *sh);
	static bool homunculus_requestload (int account_id, int homun_id);
	static int homunculus_requestsave (int account_id, struct s_homunculus* sh);
	static int homunculus_requestdelete (int homun_id);
	/******QUEST SYTEM*******/
	static void request_questlog (struct map_session_data * sd);
	static int quest_save (struct map_session_data * sd);
	// MERCENARY SYSTEM
	static int mercenary_create (struct s_mercenary *merc);
	static int mercenary_request (int merc_id, int char_id);
	static int mercenary_delete (int merc_id);
	static int mercenary_save (struct s_mercenary *merc);
	// MAIL SYSTEM
	static int Mail_requestinbox (int char_id, unsigned char flag);
	static int Mail_read (int mail_id);
	static int Mail_getattach (int char_id, int mail_id);
	static int Mail_delete (int char_id, int mail_id);
	static int Mail_return (int char_id, int mail_id);
	static int Mail_send (int account_id, struct mail_message *msg);
	// AUCTION SYSTEM
	static int Auction_requestlist (int char_id, short type, int price, const char* searchtext, short page);
	static int Auction_register (struct auction_data *auction);
	static int Auction_cancel (int char_id, unsigned int auction_id);
	static int Auction_close (int char_id, unsigned int auction_id);
	static int Auction_bid (int char_id, const char* name, unsigned int auction_id, int bid);
	// ELEMENTAL SYSTEM
	static int elemental_create (struct s_elemental *ele);
	static int elemental_request (int ele_id, int char_id);
	static int elemental_delete (int ele_id);
	static int elemental_save (struct s_elemental *ele);
	/* @accinfo */
	static void request_accinfo (int u_fd, int aid, int group_lv, char* query);
	/* */
	static int CheckForCharServer (void);
	/* */
	static void pWisMessage (int fd);
	static void pWisEnd (int fd);
	static int pWisToGM_sub (struct map_session_data* sd,va_list va);
	static void pWisToGM (int fd);
	static void pRegisters (int fd);
	static void pChangeNameOk (int fd);
	static void pMessageToFD (int fd);
	static void pLoadGuildStorage (int fd);
	static void pSaveGuildStorage (int fd);
	static void pPartyCreated (int fd);
	static void pPartyInfo (int fd);
	static void pPartyMemberAdded (int fd);
	static void pPartyOptionChanged (int fd);
	static void pPartyMemberWithdraw (int fd);
	static void pPartyMove (int fd);
	static void pPartyBroken (int fd);
	static void pPartyMessage (int fd);
	static void pGuildCreated (int fd);
	static void pGuildInfo (int fd);
	static void pGuildMemberAdded (int fd);
	static void pGuildMemberWithdraw (int fd);
	static void pGuildMemberInfoShort (int fd);
	static void pGuildBroken (int fd);
	static void pGuildMessage (int fd);
	static void pGuildBasicInfoChanged (int fd);
	static void pGuildMemberInfoChanged (int fd);
	static void pGuildPosition (int fd);
	static void pGuildSkillUp (int fd);
	static void pGuildAlliance (int fd);
	static void pGuildNotice (int fd);
	static void pGuildEmblem (int fd);
	static void pGuildCastleDataLoad (int fd);
	static void pGuildMasterChanged (int fd);
	static void pQuestLog (int fd);
	static void pQuestSave (int fd);
	static void pMailInboxReceived (int fd);
	static void pMailNew (int fd);
	static void pMailGetAttach (int fd);
	static void pMailDelete (int fd);
	static void pMailReturn (int fd);
	static void pMailSend (int fd);
	static void pAuctionResults (int fd);
	static void pAuctionRegister (int fd);
	static void pAuctionCancel (int fd);
	static void pAuctionClose (int fd);
	static void pAuctionMessage (int fd);
	static void pAuctionBid (int fd);
	static void pItembound_ack (int fd);
	static void pMercenaryReceived (int fd);
	static void pMercenaryDeleted (int fd);
	static void pMercenarySaved (int fd);
	static void pElementalReceived (int fd);
	static void pElementalDeleted (int fd);
	static void pElementalSaved (int fd);
	static void pCreatePet (int fd);
	static void pRecvPetData (int fd);
	static void pSavePetOk (int fd);
	static void pDeletePetOk (int fd);
	static void pCreateHomunculus (int fd);
	static void pRecvHomunculusData (int fd);
	static void pSaveHomunculusOk (int fd);
	static void pDeleteHomunculusOk (int fd);
};

extern CIntif *intif;

#ifdef HERCULES_CORE
void intif_defaults(void);
#endif // HERCULES_CORE


#endif /* MAP_INTIF_H */
